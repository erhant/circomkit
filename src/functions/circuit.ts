import {existsSync, mkdirSync, writeFileSync} from 'fs';
import {exec} from 'child_process';
import type {CircuitConfig} from '../types';
import type {CircomkitConfig} from '../configs';

// @todo make compilation config a separate entity derived from CircomkitConfig and be Partial.

/** Compile the circuit using the given configuration.
 *
 * @param config The Circomkit configuration for the compiler.
 * @param targetPath The path to the target circuit file with the main component.
 * @param outDir The output directory for the compiled circuit.
 * @returns The `stdout` and `stderr` of the compilation process.
 */
export async function compileCircuit(config: CircomkitConfig, targetPath: string, outDir: string) {
  mkdirSync(outDir, {recursive: true});

  // prettier-ignore
  let flags = `--sym --wasm --r1cs -p ${config.prime} -o ${outDir}`;
  if (config.include.length > 0) flags += ' ' + config.include.map(path => `-l ${path}`).join(' ');
  if (config.verbose) flags += ' --verbose';
  if (config.inspect) flags += ' --inspect';
  if (config.cWitness) flags += ' --c';
  if (config.optimization > 2) {
    // --O2round <value>
    flags += ` --O2round ${config.optimization}`;
  } else {
    // --O0, --O1 or --O2
    flags += ` --O${config.optimization}`;
  }

  // call `circom` as a sub-process
  try {
    const result = await new Promise<{stdout: string; stderr: string}>((resolve, reject) => {
      exec(`${config.circomPath} ${flags} ${targetPath}`, (error, stdout, stderr) => {
        if (error === null) {
          resolve({stdout, stderr});
        } else {
          reject(error);
        }
      });
    });

    return {...result};
  } catch (e) {
    throw new Error('Compiler error:\n' + e);
  }
}

/**
 * Programmatically creates the `main` component of a template circuit.
 * @param config circuit configuration
 * @param targetDir directory to save the circuit file
 * @param targetPath name of the circuit file
 */
export function instantiateCircuit(config: Required<CircuitConfig>, targetDir: string, targetPath: string) {
  const circuitCode = makeCircuit(config);

  if (!existsSync(targetDir)) {
    mkdirSync(targetDir, {recursive: true});
  }

  writeFileSync(targetPath, circuitCode);
}

/** Builds the source code for a `main` component based on the circuit config, kind of like `ejs.render`.
 *
 * **Be very careful when editing this file.** */
export function makeCircuit(config: Required<CircuitConfig>) {
  const {version, file, pubs, template, params} = config;
  return `// auto-generated by circomkit
pragma circom ${version};

include "../${file}.circom";

component main${pubs.length === 0 ? '' : ' {public[' + pubs.join(', ') + ']}'} = ${template}(${params.join(', ')});
`;
}
